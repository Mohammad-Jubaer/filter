{"version":3,"sources":["Card.js","CardList.js","Search.js","App.js","index.js"],"names":["Card","props","emp","map","x","i","className","key","alt","name","first","src","picture","large","last","dob","age","email","CardList","Search","type","placeholder","onChange","inputReducer","state","action","value","val","filtered","user","App","React","useReducer","searchState","dispatch","changeHandler","useCallback","e","target","trim","toLowerCase","useEffect","filter","includes","a","fetch","res","json","data","results","fetchData","Fragment","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAiBeA,G,MAfF,SAACC,GACZ,OAAOA,EAAMC,IAAIC,KAAI,SAACC,EAAGC,GAAJ,OACnB,yBAAKC,UAAU,OAAOC,IAAKF,GACzB,yBAAKG,IAAKJ,EAAEK,KAAKC,MAAOC,IAAKP,EAAEQ,QAAQC,QACvC,yBAAKP,UAAU,kBACb,4BACGF,EAAEK,KAAKC,MADV,IACkBN,EAAEK,KAAKK,MAEzB,wCAAcV,EAAEW,IAAIC,KACpB,2BAAIZ,EAAEa,cCGCC,G,MARE,SAACjB,GAChB,OACE,yBAAKK,UAAU,aACb,kBAAC,EAAD,CAAMJ,IAAKD,EAAMC,SCIRiB,G,MATA,SAAClB,GAAD,OACb,2BACEmB,KAAK,SACLd,UAAU,aACVe,YAAapB,EAAMoB,YACnBC,SAAUrB,EAAMqB,aCFdC,G,MAAe,SAACC,EAAOC,GAC3B,OAAQA,EAAOL,MACb,IAAK,SACH,OAAO,2BACFI,GADL,IAEEE,MAAOD,EAAOE,MAElB,IAAK,MACH,OAAO,2BACFH,GADL,IAEEI,SAAUH,EAAOE,IACjBE,KAAMJ,EAAOE,MAEjB,IAAK,SACH,OAAO,2BACFH,GADL,IAEEI,SAAUH,EAAOE,MAGrB,QACE,OAAOH,KAoDEM,EAhDH,WAAO,IAAD,EACgBC,IAAMC,WAAWT,EAAc,CAC7DM,KAAM,GACND,SAAU,GACVF,MAAO,KAJO,mBACTO,EADS,KACIC,EADJ,KAOVC,EAAgBC,uBAAY,SAACC,GACjCH,EAAS,CAAEd,KAAM,SAAUO,IAAKU,EAAEC,OAAOZ,MAAMa,OAAOC,kBACrD,IAyBH,OAvBAC,qBAAU,WACJR,EAAYP,MACdQ,EAAS,CACPd,KAAM,SACNO,IAAKM,EAAYJ,KAAKa,QACpB,SAACtC,GAAD,OACEA,EAAEK,KAAKC,MAAM8B,cAAcG,SAASV,EAAYP,QAChDtB,EAAEK,KAAKK,KAAK0B,cAAcG,SAASV,EAAYP,YAIrDQ,EAAS,CAAEd,KAAM,MAAOO,IAAKM,EAAYJ,SAE1C,CAACI,EAAYP,MAAOO,EAAYJ,OACnCY,qBAAU,YACO,uCAAG,8BAAAG,EAAA,sEACEC,MAAM,yCADR,cACVC,EADU,gBAEGA,EAAIC,OAFP,OAEVC,EAFU,OAIhBd,EAAS,CAAEd,KAAM,MAAOO,IAAKqB,EAAKC,UAJlB,2CAAH,qDAMfC,KACC,IAED,kBAAC,IAAMC,SAAP,KACE,yBAAK7C,UAAU,OACb,6CACA,kBAAC,EAAD,CACEe,YAAY,2BACZC,SAAUa,IAEZ,kBAAC,EAAD,CAAUjC,IAAK+B,EAAYL,cCpEnCwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d6890e66.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\nconst Card = (props) => {\r\n  return props.emp.map((x, i) => (\r\n    <div className=\"card\" key={i}>\r\n      <img alt={x.name.first} src={x.picture.large} />\r\n      <div className=\"card-container\">\r\n        <h2>\r\n          {x.name.first} {x.name.last}\r\n        </h2>\r\n        <small>AGE : {x.dob.age}</small>\r\n        <p>{x.email}</p>\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nimport './CardList.css';\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      <Card emp={props.emp} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nimport './Search.css';\r\n\r\nconst Search = (props) => (\r\n  <input\r\n    type=\"search\"\r\n    className=\"search-box\"\r\n    placeholder={props.placeholder}\r\n    onChange={props.onChange}\r\n  />\r\n);\r\n\r\nexport default Search;\r\n","import React, { useEffect, useCallback } from 'react';\n\nimport CardList from './CardList';\nimport Search from './Search';\n\nimport './App.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n      };\n    case 'SET':\n      return {\n        ...state,\n        filtered: action.val,\n        user: action.val,\n      };\n    case 'FILTER':\n      return {\n        ...state,\n        filtered: action.val,\n        // user: action.val,\n      };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [searchState, dispatch] = React.useReducer(inputReducer, {\n    user: [],\n    filtered: [],\n    value: '',\n  });\n\n  const changeHandler = useCallback((e) => {\n    dispatch({ type: 'CHANGE', val: e.target.value.trim().toLowerCase() });\n  }, []);\n\n  useEffect(() => {\n    if (searchState.value) {\n      dispatch({\n        type: 'FILTER',\n        val: searchState.user.filter(\n          (x) =>\n            x.name.first.toLowerCase().includes(searchState.value) ||\n            x.name.last.toLowerCase().includes(searchState.value)\n        ),\n      });\n    } else {\n      dispatch({ type: 'SET', val: searchState.user });\n    }\n  }, [searchState.value, searchState.user]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetch('https://randomuser.me/api/?results=12');\n      const data = await res.json();\n\n      dispatch({ type: 'SET', val: data.results });\n    };\n    fetchData();\n  }, []);\n  return (\n    <React.Fragment>\n      <div className=\"App\">\n        <h1>Random People</h1>\n        <Search\n          placeholder=\"search for random people\"\n          onChange={changeHandler}\n        />\n        <CardList emp={searchState.filtered} />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}